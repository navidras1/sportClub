
@{
    ViewData["Title"] = "کاربران";
    Layout = "~/Views/Shared/_VueLayout.cshtml";
}

<h1>کاربران</h1>


<v-btn @@click="showRegisterNewUserDialog=true; GetRoles();">کاربر جدید</v-btn> <v-btn>انتساب نقش به {{userName}}</v-btn>

<v-data-table :headers="userTblHeader"
              :items="userTblSource"
              :items-per-page="5"
              class="elevation-1">
    <template v-slot:body="{items}">
        <tbody>
            <tr v-for="item in items" :key="item.id" style="text-align:right" @@click="ShowTrafficDetail=false;selectedUserId=item.id ;userName=item.userName ;GetUserSessions();" onclick="highliteTR(this)">
                <td>{{ item.userName }}</td>
                <td>{{ item.role }}</td>
                <td>{{ item.email }}</td>
                <td>{{ item.phone }}</td>




                @*<td>
                        <v-btn class="mx-2" fab dark small color="pink" @@click="onButtonClick(item.id)">
                            <v-icon dark>mdi-heart</v-icon>
                        </v-btn>
                    </td>*@
            </tr>
        </tbody>
    </template>

</v-data-table>



<h2>دوره کاربر {{userName}}</h2>
<v-data-table :headers="userSessionTblHeader"
              :items="userSessionTblSource"
              :items-per-page="5"
              
              class="elevation-1">
    <template v-slot:body="{items}">
        <tbody>
            <tr v-for="item in items" :key="item.id" style="text-align:right" @@click="ShowTrafficDetail=true;SelectedSessionUserId=item.sessionUserId;SelectedSalonId=item.salonId;GetUserTraffic();" onclick="highliteTR(this)">
                <td>{{ item.salonName }}</td>
                <td>{{ item.sportName }}</td>
                <td>{{ item.startDateShamsi }}</td>
                <td>{{ item.endDateShamsi }}</td>
                <td>{{ item.startTime }}</td>
                <td>{{ item.endTime }}</td>
                <td>{{ item.numberOfSessions }}</td>
                <td>
                    <v-btn @@click="ShowTrafficDetail=true;showUserEntranceDialog=true;SelectedSessionUserId=item.sessionUserId;  GetFreeCabinets()">ورود</v-btn>
                    <v-btn @@click="SelectedSessionUserId=item.sessionUserId;SessionUserExerProgDialogShow=true;">برنامه ورزشی</v-btn>

                
                </td>
                

                
            </tr>
        </tbody>
    </template>

</v-data-table>

<div v-show="ShowTrafficDetail">
    <h2>ترافیک کاربر {{userName}}</h2>
    <v-data-table :headers="userTrafficHeader"
                  :items="userTrafficTblSource"
                  :items-per-page="5"
                  class="elevation-1">
        <template v-slot:body="{items}">
            <tbody>
                <tr v-for="item in items" :key="item.id" style="text-align:right" onclick="highliteTR(this)">
                    <td>{{ GetTimeOfDate(item.entranceDatetime) }}</td>
                    <td>{{ item.entranceDatetimeShamsi }}</td>
                    <td>{{ GetTimeOfDate(item.exitDatetime) }}</td>
                    <td>{{ item.exitDatetimeShamsi }}</td>

                    <td><v-btn v-if="item.exitDatetime==null" @@click="UserTrafficId=item.id;UserExit()">خروج</v-btn></td>



                </tr>
            </tbody>
        </template>

    </v-data-table>
    جلسات حضور: <span>{{UserSessionCount}}</span> جلسات باقیمانده: <span>{{UserSessionRemainCount}}</span>
</div>

<v-btn @@click="ShowInsuranceDialog"> ثبت بیمه کاربر </v-btn>


@*دیالوگ ثبت کاربر*@
<v-dialog v-model="showRegisterNewUserDialog"
          persistent
          max-width="600px" content-class="my-custom-dialog">

    <v-card>
        <v-card-title>
            <span class="text-h5">ثبت کاربر جدید</span>
        </v-card-title>
        <v-card-text>
            <v-container>
                <v-row>

                    <v-col cols="12">
                        <v-select v-model="RoleSelect"
                                  :items="RoleMenuSource"
                                  item-text="roleName"
                                  item-value="roleName"
                                  label="نقش">

                        </v-select>
                    </v-col>



                    <v-col cols="12">
                        <v-text-field label="نام کاربری*"
                                      required
                                      hint="نام کاربری را وارد کنید"
                                      v-model="regUserModel.username"></v-text-field>
                    </v-col>
                    <v-col cols="12">
                        <v-text-field label="ایمیل*"
                                      required
                                      hint="ایمیل را وارد کنید"
                                      v-model="regUserModel.email"></v-text-field>
                    </v-col>
                    <v-col cols="12">
                        <v-text-field label="رمز*"
                                      required
                                      hint="رمز را وارد کنید"
                                      v-model="regUserModel.password"></v-text-field>
                    </v-col>

        </v-card-text>
        <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn color="red darken-1"
                   text
                   @@click="showRegisterNewUserDialog = false;salonName=''">
                انصراف
            </v-btn>
            <v-btn color="green darken-1"
                   text
                   @@click="registerANewUser()">
                ثبت
            </v-btn>
        </v-card-actions>
    </v-card>
</v-dialog>

@*دیالوگ مربوط به ورود کاربر*@
<v-dialog v-model="showUserEntranceDialog"
          
          max-width="600px" content-class="my-custom-dialog">

    <v-card>
        <v-card-title>
            <span class="text-h5"> ورود کاربر </span>
        </v-card-title>
        <v-card-text>
            <v-container>
                <v-row>

                    <v-col cols="12">
                        <v-select v-model="CabinetSelect"
                                  :items="CabinetSource"
                                  item-text="cabinetName"
                                  item-value="id"
                                  label="کمد">

                        </v-select>
                    </v-col>



                    

        </v-card-text>
        <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn color="red darken-1"
                   text
                   @@click="showUserEntranceDialog = false;salonName=''">
                انصراف
            </v-btn>
            <v-btn color="green darken-1"
                   text
                   @@click="RegisterUserEntry()">
                ثبت
            </v-btn>
        </v-card-actions>
    </v-card>
</v-dialog>

@*دیالوگ ثبت برنامه ورزشی دوره کاربر*@
<v-dialog v-model="SessionUserExerProgDialogShow"
          persistent
          max-width="600px" content-class="my-custom-dialog">

    <v-card>
        <v-card-title>
            <span class="text-h5">ثبت برنامه کاربر</span>
        </v-card-title>
        <v-card-text>
            <v-container>
                <v-row>

                    
                    <v-col cols="12">
                        <v-textarea label="برنامه کاربر*"
                                      required
                                      v-model="SessionUserProgram"></v-textarea>
                    </v-col>

        </v-card-text>
        <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn color="red darken-1"
                   text
                   @@click="SessionUserExerProgDialogShow = false;">
                انصراف
            </v-btn>
            <v-btn color="green darken-1"
                   text
                   @@click="AssignpExerciseProgramToSessionUser()">
                ثبت
            </v-btn>
        </v-card-actions>
    </v-card>
</v-dialog>






<v-snackbar v-model="snackbar"
            :timeout="snackBarTimeout"
            color="blue-grey">
    {{ snackbarMessage }}

    @*<template v-slot:action="{ attrs }">
            <v-btn color="red"
                   text
                   v-bind="attrs"
                   @@click="snackbar = false">
                Close
            </v-btn>
        </template>*@
</v-snackbar>

@section VueComponents{

    <script>
        myMixin = {


            data: {

                snackbar: false,
                snackbarMessage: "",

                snackbarColor: "",
                snackBarTimeout: 3000,

                userTblHeader: [
                    { text: 'نام کاربری', value: 'userName' },

                    { text: 'نقش', value: 'role' },

                    { text: 'ایمیل', value: 'email' },
                    { text: 'تلفن', value: 'phone' },

                ],
                userTblSource: [],
                userName: "",
                regUserModel: {
                    username: "",
                    email: "",
                    password: ""
                },
                showRegisterNewUserDialog: false,
                RoleSelect: {},
                RoleMenuSource: [],
                selectedUserId: 0,

                userSessionTblHeader: [
                    { text: "نام سالن", value: "salonName" },
                    { text: "نام ورزش", value: "sportName" },
                    { text: "تاریخ شروع", value: "startDateShamsi" },
                    { text: "تاریخ پایان", value: "endDateShamsi" },
                    { text: "ساعت شروع", value: "startTime" },
                    { text: "ساعت پایان", value: "endTime" },
                    { text: "تعداد جلسات", value: "numberOfSessions" },
                    { text:"نوع جلسه", value:"SessionType"},
                    { text: "جنسیت", value:"Sex"}
                ],
                userSessionTblSource: [],
                showUserEntranceDialog: false,

                CabinetSelect: {},
                CabinetSource: [],
                SelectedSessionUserId: 0,
                userTrafficHeader: [
                    { text: "ساعت ورود", value: "entranceDatetime" },
                    { text: "تاریخ ورود", value: "entranceDatetimeShamsi" },
                    { text: "ساعت خروج", value: "exitDatetime" },
                    { text: "تاریخ خروج", value: "exitDatetimeShamsi" },
                    { text: "عملیات", value: "" }





                ],
                userTrafficTblSource: [],
                SessionUserExerProgDialogShow: false,
                SessionUserProgram: "",
                SelectedSalonId: 0,
                UserSessionCount: 0,
                UserSessionRemainCount: 0,
            },
            methods: {

                showSnack: function (snackbarMessage) {
                    this.snackbar = true;
                    this.snackbarMessage = snackbarMessage;
                },
                GetUsers: async function () {
                    var model = {
                        Model: null,
                        Address: "/api/Authenticate/listOfUsers"

                    };

                    let vv = await CallApi(model);

                    this.userTblSource = vv.data;
                },
                registerANewUser: async function () {

                    let rSelect = "";
                    if (this.RoleSelect.id) {
                        rSelect = this.RoleSelect.roleName;
                    }
                    else {
                        rSelect = this.RoleSelect;
                    }

                    let model = {
                        Model: this.regUserModel,
                        Address: "/api/Authenticate/RegisterUser"
                    };

                    let vv = await CallApi(model);

                    //let userId = vv.userId;

                    model = {
                        Model: {
                            roleName: rSelect,
                            userName: this.regUserModel.username
                        },
                        Address: "/api/Authenticate/assignRoleToUser"
                    };
                    await CallApi(model);

                    this.showRegisterNewUserDialog = false;
                    this.showSnack("کاربر با موفقیت ثبت شد.");

                    await this.GetUsers();
                },
                GetRoles: async function () {
                    var model = {
                        Model: null,
                        Address: "/api/Authenticate/listOfRoles"

                    };

                    let vv = await CallApi(model);
                    this.RoleMenuSource = vv.data;
                    this.RoleSelect = vv.data[0];
                },
                GetUserSessions: async function () {

                    let model = {
                        Model: {
                            userId: this.selectedUserId
                        },
                        Address: "/api/Session/GetListOfSessionUsersByUserId"

                    };

                    let vv = await CallApi(model);
                    this.userSessionTblSource = vv.data;

                },

                GetFreeCabinets: async function () {
                    let model = {
                        Model: {
                            isEngaged: false,
                            salonId: this.SelectedSalonId

                        },
                        Address: "/api/Cabinet/GetCabinetsWithSatuts"
                    };
                    let vv = await CallApi(model);
                    this.CabinetSource = vv.data;

                },


                RegisterUserEntry: async function () {
                    //alert(`${this.CabinetSelect} ${this.selectedUserId}`);

                    let model = {
                        Model: {
                            "cabinetId": this.CabinetSelect,
                            "engaged": true
                        },
                        Address: "/api/Cabinet/EngageReleaseCabinet"
                    }
                    let vv = await CallApi(model);
                    if (!vv.hasError) {
                        this.showSnack("کمد با موفقیت اشغال شد");
                    }


                    model = {
                        Model: {
                            sessionUserId: this.SelectedSessionUserId

                        }
                        , Address: "/api/Session/EnterSessionUserTraffic"
                    };

                    vv = await CallApi(model);
                    if (!vv.hasError) {
                        this.showSnack("ورود ثبت شد.")
                        this.showUserEntranceDialog = false;


                    }

                    model = {
                        Model: {
                            cabinetId: this.CabinetSelect,
                            trafficId: vv.data.id
                        }
                        , Address: "/api/Session/InsertTrafficCabinet"
                    }

                    vv = await CallApi(model);

                    this.GetUserTraffic();


                },


                GetUserTraffic: async function () {
                    this.SelectedSessionUserId;

                    let model = {
                        Model: {
                            sessionUserId: this.SelectedSessionUserId
                        },
                        Address: "/api/Session/GetUserTraffic"
                    };
                    let vv = await CallApi(model);
                    this.userTrafficTblSource = vv.data.res;
                    this.UserSessionCount = vv.data.resCount;
                    this.UserSessionRemainCount = vv.data.remainCount;
                    //alert(this.SelectedSalonId);

                },
                UserExit: async function () {
                    //alert(this.UserTrafficId + " " + this.CabinetSelect);

                    let model = {
                        Model: {
                            trafficId: this.UserTrafficId
                        },
                        Address: "/api/Session/ExitSessionTraffic"
                    };

                    let vv = await CallApi(model);

                    if (vv.hasError == false) {
                        this.showSnack("خروج کاربر با موفقیت ثبت شد.");
                    }

                    model = {
                        Model: {
                            trafficId: this.UserTrafficId
                        },
                        Address: "/api/Session/GetTrafficCabinetByTrafficId"
                    };

                    vv = await CallApi(model);





                    model = {
                        Model: {
                            "cabinetId": vv.data.cabinetId,
                            "engaged": false
                        },
                        Address: "/api/Cabinet/EngageReleaseCabinet"
                    }
                    vv = await CallApi(model);

                    this.GetUserTraffic();

                },
                ShowTrafficDetail: false,

                AssignpExerciseProgramToSessionUser: async function () {

                    let model = {
                        Model: {
                            sessionUserId: this.SelectedSessionUserId,
                            excerciseProgram: this.SessionUserProgram
                        }
                        , Address: "/api/Session/AssignpExerciseProgramToSessionUser"
                    };
                    let vv = await CallApi(model);

                    if (vv.hasError == false) {
                        this.showSnack("برنامه با موفقیت به کاربر دوره اختصاص داده شد.");
                    }
                    else {
                        this.showSnack(vv.message);
                    }

                }

            },
            created: function () {
                this.GetUsers();
            }

        };

        

        function highliteTR(tr) {

            let theRows = tr.parentNode.rows;

            for (let i = 0; i < theRows.length; i++) {
                let ss = theRows[i];
                ss.classList.remove("bg-info");

            }
            tr.classList.add("bg-info");
        }
    </script>
}